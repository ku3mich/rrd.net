name: build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

# ---
  build:
    name: Build and analyze
    runs-on: windows-latest
    env:
        DOTNET_NOLOGO: true
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
        DOTNET_CLI_TELEMETRY_OPTOUT: true
        NUGET_FEED: https://api.nuget.org/v3/index.json
        NUGET_KEY: ${{ secrets.NUGET_ORG_API_KEY }}
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x.x
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"ku3mich_rrd.net" /o:"ku3mich" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build --configuration Release RRDNet
          powershell -f run-test.ps1 
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
      - name: Pack
        run: powershell -f run-pack.ps1
      - name: nupkg push
        run: find ./nupkg -name '*.nupkg' -exec nuget push {} $NUGET_KEY -source $NUGET_FEED \;
# ---
  build:
    runs-on: ubuntu-latest
    env:
        DOTNET_NOLOGO: true
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
        DOTNET_CLI_TELEMETRY_OPTOUT: true
        NUGET_FEED: https://api.nuget.org/v3/index.json
        NUGET_KEY: ${{ secrets.NUGET_ORG_API_KEY }}
    steps:
    - uses: actions/checkout@v2
      with: 
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Setup Java JDK
      uses: actions/setup-java@v1.4.3
      with:
        java-version: '11.0.4' 
        java-package: jdk 
        architecture: x64 
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.x.x
    - name: install SonarCloud scanner
      run: |
        mkdir -p ./.sonar/scanner
        dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
    - name: build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        ./.sonar/scanner/dotnet-sonarscanner begin /k:"ku3mich_XUnit.Extensions" /o:"ku3mich" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths=".coverage/coverage.opencover.xml"
        dotnet build --configuration Release
        find ./ -maxdepth 1 -type d -name '*.Tests' -exec dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=../.coverage/ /p:MergeWith=../.coverage/ {} \; 
        ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
    - name: Pack
      run: dotnet pack --configuration Release -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg -o ./nupkg
    - name: nupkg push
      run: find ./nupkg -name '*.nupkg' -exec nuget push {} $NUGET_KEY -source $NUGET_FEED \;
      
